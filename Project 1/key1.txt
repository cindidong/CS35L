Cindi Dong

Homework:
Exercise 1.1: Moving around in Emacs
1. e m a c s SP e x e r 1 . h t m l Enter
2. C-s H T M L Enter
3. C-s s c a v e n g e r C-r Enter
4. C-s s e l f - r e f e r e n t i a l C-r Enter
5. C-s a r r o w C-r Enter
6. C-e
7. C-a
8. Yes
9. No
10. C-x C-c

Exercise 1.2: Deleting text in Emacs
1. e m a c s SP e x e r 2 . h t m l Enter
2. M-g 1 8 Enter C-n C-SP C-e C-w
3. M-< C-s D E L E T E Enter C-a C-k
4. M-< C-s w i k i p e d i a C-s M-a C-SP M-e M-e C-w
5. M-< C-s < ! - - C-r M-z > C-n C-a C-SP M-e M-e M-e C-w C-s < ! - - C-a C-k

Exercise 1.3: Inserting text in Emacs
2. M-% A s s i g n m e n t 1 Enter A s s i g n m e n t 4 2 Enter y y n
3. M-< M-% U T F - 8 Enter U S - A S C I I Enter y n
4. M-< C-M-s [ ^ [ : a s c i i : ] ] C-a C-e C-w
5. M-< C-s < / o l > Enter Enter
6. C-x C-s C-x C-c

Exercise 1.4: Other editing tasks in Emacs
3.
C-r < ! - - C-SP C-e M-w 
C-r < / h t m l C-r C-n C-y

4.
M-> C-r < ! - - C-r C-SP C-s > C-s C-s C-s M-w
C-r o u t p u t SP n o t h i n g C-r C-e C-n C-y

M-> C-r < ! - - C-r C-r C-SP C-s > M-w
C-r o u t p u t SP n o t h i n g C-r C-s Enter C-y

M-> C-r < ! - - C-r C-r C-r C-SP C-s > C-s M-w
C-r s u b m i t C-r C-r C-r C-r C-r C-e C-n C-n C-y

M-> C-r < ! - - C-r C-r C-r C-r C-SP C-e M-w
C-r l e a r n i n g SP t o SP u s e SP E m a c s C-r C-e C-n C-n C-y

M-> C-r < ! - - C-r C-r C-r C-r C-r C-SP C-e M-w
C-r s c a v e n g e r SP h u n t C-r C-n C-y

5. M-> C-SP C-r - - - C-r C-r Enter C-w
6. C-x u
7. M-> - - > C-r - - - C-r C-r Enter C-o < ! - -
8. M-< C-s < o l > C-s C-s C-s C-s C-s C-s C-s
(7 cases of <ol>)
M-< M-% < o l > Enter < o L > Enter y y y y y y y

Exercise 1.5: Doing commands in Emacs
1. e m a c s Enter
M-x m a k e - d i r e c t o r y Enter j u n k Enter
2. C-x C-f j u n k / h e l l o . c Enter
(Pasted the text)
3. M-x c o m p i l e Enter C-a C-k g c c SP h e l l o . c Enter
4. C-x b h e l l o - o u t Enter C-u M-! . / a . o u t Enter 
5. C-SP C-e M-w

Exercise 1.6: Running Elisp code
1. C-x b * s c r a t c h * Enter
2. m o s t - n e g a t i v e - f i x n u m C-j
-2305843009213693952
m o s t - p o s i t i v e - f i x n u m C-j
2305843009213693951
( f o r m a t SP " % x " SP m o s t - p o s i t i v e - f i x n u m )
0x1fffffffffffffff
( f o r m a t SP " % x " SP m o s t - n e g a t i v e - f i x n u m )
0x2000000000000000
3. ( r a n d o m SP " 4 0 5 - 1 2 6 - 7 4 7 " ) C-j
1271687696980521401
4. ( s e t q SP x SP ( r a n d o m ) ) C-j
1672779149647106728
( s e t q SP y SP ( r a n d o m ) ) C-j
2176710933816420054
5. ( * SP x SP y ) C-j 
p = -1377719573936600976
(s e t q SP p SP ( * SP x SP y ) )
( l o g i o r SP p SP m o s t - n e g a t i v e - f i x n u m )
r = -1377719573936600976
6. The r I got is not mathematically correct; the product of 2 positive integers should not be negative.
7. No, x and y are not random in the mathematical sense. This is because a computer algorithm is used to generate a "random" number, which is based on input (seed). Therefore, given the same seed, you have a change of getting the same number.
8. As long as the product of x and y does not overflow (or the product is within 2^61, since my machine is 64 bits and 2 bits are used for tags), r will be mathematically correct. For there not to be overflow, the product of x and y needs to be within 2^61. One of these cases is where both x and y are both 2^29. The probability of this happening is P(x) = 2^29/2^61 * P(y) = 2^29/2^61, which is about 0. The other cases are similar. Therefore, the summation of all the cases are 0, which means that the total probability that the r value is the mathematically correct product of x and y is about 0.
